# -*- coding: utf-8 -*-
"""18.065 Intermediate: 1D and 2D

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LeyHaijqtdZmag-ATnW_ra8vitOsVDYh
"""

# Installing PyTorch, import libraries

#!pip3 install torch torchvision
#!pip3 install h5py
#!pip3 install progressbar2

import torch, torchvision
from torchvision import transforms
from torch.autograd.variable import Variable

import os, copy
from os.path import exists, commonprefix
import time
import progressbar

import h5py
import numpy as np
from matplotlib import pyplot as pp

from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import seaborn as sns

# helper functions
from helper_weights_states import get_weights, set_weights, set_states, get_random_weights, get_random_states, get_diff_weights, get_diff_states
from helper_normalize import normalize_direction, normalize_directions_for_weights, normalize_directions_for_states, ignore_biasbn
from helper_directions import create_target_direction, create_random_direction, setup_direction, name_direction_file, load_directions
from helper_h5_util import write_list, read_list
from helper_surface import name_surface_file, setup_surface_file
from helper_dataset import get_relative_path, load_dataset
from helper_plot import plot_1d_loss_err, plot_2d_contour

# PyTorch settings
use_cuda = True

# Pretrained ResNet 50
model = torchvision.models.resnet50(pretrained=True)
if use_cuda: model = model.cuda()

# Saving model to file
torch.save(model, "resnet50")

# model weights and state_dicts (copy)
weights = get_weights(model)
state = copy.deepcopy(model.state_dict())

# set up args
class Args:
  def __init__(self, batch_size = 128, x="-1:1:51", y = None, 
              dir_file = '', dir_type='weights', xnorm = '',
              ynorm = '', xignore = '', yignore = '', 
               same_dir = 'store_true', idx = 0, 
               model_file="resnet50", model_file2 = "", model_file3 = "",
              surf_file = '', raw_data = False, data_split = 1,
              dataset='cifar10', datapath='cifar10/data', 
              split_idx=0, trainloader='', testloader='', threads=2,
              value_max = 0.1):
    
    self.batch_size = batch_size
    self.threads = threads
    
    self.x = x
    self.y = y
    self.dir_file = dir_file
    self.dir_type = dir_type
    self.xnorm = xnorm
    self.ynorm = ynorm
    self.xignore = xignore
    self.yignore = yignore
    self.same_dir = same_dir
    self.idx = idx
    
    self.model_file = model_file
    self.model_file2 = model_file2
    self.model_file3 = model_file3
    self.surf_file = surf_file
    
    self.raw_data = raw_data
    self.data_split = data_split
    self.dataset = dataset
    self.datapath = datapath
    self.split_idx = split_idx
    self.trainloader = trainloader
    self.testloader = testloader
    
    self.value_max = value_max
    
    self.xmin = None
    self.xmax = None
    self.ymin = None
    self.ymax = None
    self.xnum = None
    self.ynum = None
    
#args = Args(batch_size = 128, dir_type = "states") #1D
args = Args(batch_size = 128, x = "-1:1:21", y = "-1:1:21", dir_type = "states", same_dir = False) #2D

# Plotting resolution

try:
    args.xmin, args.xmax, args.xnum = [float(a) for a in args.x.split(':')]
    args.ymin, args.ymax, args.ynum = (None, None, None)
    if args.y:
        args.ymin, args.ymax, args.ynum = [float(a) for a in args.y.split(':')]
        assert args.ymin and args.ymax and args.ynum, \
        'You specified some arguments for the y axis, but not all'
except:
    raise Exception('Improper format for x- or y-coordinates. Try something like -1:1:51')

# direction file/surface file
dir_file = name_direction_file(args)
setup_direction(args, dir_file, model)

surf_file = name_surface_file(args, dir_file)
setup_surface_file(args, surf_file, dir_file)

# directions
directions = load_directions(dir_file)

# Crunch

f = h5py.File(surf_file, 'r')
xcoordinates = f['xcoordinates'][:]
ycoordinates = f['ycoordinates'][:] if 'ycoordinates' in f.keys() else None

plotting_dims = 2 if ycoordinates is not None else 1

f.close()

shape = xcoordinates.shape if ycoordinates is None else (len(xcoordinates),len(ycoordinates))
values = -np.ones(shape=shape)

inds = np.array(range(values.size))

#2D
if plotting_dims == 2:
  xcoord_mesh, ycoord_mesh = np.meshgrid(xcoordinates, ycoordinates)
  s1 = xcoord_mesh.ravel()[inds]
  s2 = ycoord_mesh.ravel()[inds]
  coords = np.c_[s1, s2]
#1D
else:
  coords = xcoordinates.ravel()[inds]

def eval_layer_vals(model, children_num, loader):
  model_part = torch.nn.Sequential(*list(model.children())[:children_num])
  
  total_val = 0
  total = 0
  num_batch = len(loader)
  
  with torch.no_grad():
    for batch_idx, (inputs, _) in enumerate(loader):
          batch_size = inputs.size(0)
          total += batch_size
          inputs = Variable(inputs)
          inputs = inputs.cuda()

          outputs = model_part(inputs)

          total_val += torch.sum(outputs[:][0][0][0])

  return total_val/total

# download CIFAR10 if it does not exit
torchvision.datasets.CIFAR10(root=args.dataset + '/data', train=True, download=True)

trainloader, testloader = load_dataset(args.dataset, args.datapath,
                            args.batch_size, args.threads, args.raw_data,
                            args.data_split, args.split_idx,
                            args.trainloader, args.testloader)

f = h5py.File(surf_file, 'r+')

if 'train_value' not in f.keys():
  f['train_value'] = values

for count, ind in progressbar.progressbar(enumerate(inds), max_value=len(inds)):
  coord = coords[count]
  if args.dir_type == 'weights':
      set_weights(model, weights, directions, coord)
  elif args.dir_type == 'states':
    set_states(model, state, directions, coord)
  
  value = eval_layer_vals(model, 4, trainloader)
  values.ravel()[ind] = value
  
  # update surf_file
  f['train_value'][:] = values
  
f.close()

#plot_1d_loss_err(surf_file, args.xmin, args.xmax, 0.01, False, True) #1D
plot_2d_contour(surf_file, surf_name='train_value', vmin=0.001, vmax=0.01, vlevel=0.003, show=True) #2D

